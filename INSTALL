--------------------------------------------------------------------------------
  skel-app

  Basic layout and features for a J2EE application for personal projects

  github.com/a-zz, 2018
--------------------------------------------------------------------------------

[Template INSTALL file, customize accordingly]

..:: INITIAL SETUP ::..
Before the first build we should take a few minutes setting up our local
installation. That means at least:

i. Copying source/web/WEB-INF/log4j2.xml to config/web/WEB-INF/ and editing the
later to fit our needs and customize logging file path.

i. Copying source/web/WEB-INF/local.properties to config/web/WEB-INF/ and 
editing the later to fit our needs. At least the path for our local (HSQLDB) 
database should be provided, as it will be created and populated at the first 
boot.

..:: BUILDING ::..
In a nutshell, provided we have:

> JDK 1.8, properly referred by the JAVA_HOME environment variable
> Apache Ant 1.9, properly accesible by the PATH environment variable
  (prior versions could work, though not tested)

we should only need to enter the application directory and run:

  # ant

If everything runs fine, we should have a j2ee-deployable directory in

  deployable/skel-app/
  
CUSTOMIZING OUR INSTALLATION: THE BUILDING PROCCESS EXPLAINED

Basically, the application layout is:
  source/        - Source code, consisting of:
    java/		   - Compilable (Java) code 
    web/		   - Non-compilable code (web files)
  lib/			 - Libraries (mostly JARs) needed for compilation
  deployable/	 - This is where the deployable product is dropped, i.e.:
    skel-app/    - The j2ee-deployable application directory  
  config/		 - Persistent configuration directory, see below
  
The building process goes as this:

1. init - Set the build timestamp and the deployable target directory

2. layout - Set the application layout. This basically means copying the
	source/web directory as deployable/skel-app/
	
3. java.compile - Compile Java files to deployable/skel-app/WEB-INF/classes. 
	JARs needed for this are found in the lib/ directory.
	
4. gwt.compile - Compile GWT Java files to JavaScript, and place them under 
	deployable/skel-app/ui/. JARs needed for this are found in under lib/. This
	task is quite slow, but there's not too much we can do about it.
	
5. configure & postconfigure - Apply persistent configurations to the deployable 
	application. Again, see below.
	
6. deployable - Final touches to the deployable application. Basically, copying 
	the JARs from lib/ to deployable/skel-app/WEB-INF/lib, and anything 
	else that should be neccesary.
	
Ok, it's time for the configuration step.

This application is intended to have a continuous integration cycle. That is:
update from the version control repository > build > deploy > go!; and do 
it often. Thus, local configuration files located within the deployable 
directory should be kept between checkouts. What we do is:

i. Place our configuration files under config/web/. That directory isn't
(shouldn't) be tracked by the version control system, so checkouts won't 
modify them.

2. The configuration step in the building process just copies / overwrites those
files from config/web/ to deployable/skel-app/, keeping their subdirectory 
locations, i.e.:

	config/						deployable/
		web/						skel-app/
			anySubDir/					anySubDir/
				a_file_here --------------> a_file_here
				
This way our configuration isn't lost between checkouts. In fact, this mechanism
can be used for any file we may want to keep apart, or locally-customize,
from the version control system, not only configuration files. But beware! 
New releases modifying those files will need a proper reconfiguration under 
config/web/.

As the file most likely to be kept this way (and the most likely to be changed 
between releases, and the most likey to cause trouble) is 
WEB-INF/local.properties, the copy under config/web/ is checked against that one
in source/web/ at the configure step; build fails if missing property keys are 
found. The check is also made reversely: properties in config/ not found in web/ 
are likely been left behind from earlier releases. In this case an informative 
message is rendered within the build output, though this doesn't cause the build 
to fail. 

Also under config/ can be found the build/ subdirectory. That's intended for
local configurations affecting the build process. Currently none.

..:: DEPLOYMENT ::..
As said, when the build process is finished we have a j2ee-deployable 
directory in deployable/skel-app/. So, in order to deploy it we can:

i. copy it to the servlet container deployment directory (e.g. 
$TOMCAT_HOME/webapps/); or

ii. if we're building on the target server, we can just place a symbolic link
under the servlet container deployment directory to deployable/skel-app/. This 
works like a charm on Linux, (and Mac Os X, supposedly) and it's our favourite 
approach; can't tell if it's feasible on Windows.

Alternatively, we can package the deployable directory as a WAR file just 
running:

  # ant war
  
That should produce a WAR file under deployable/ which can be distributed to
target machines.

..:: DEVELOPMENT ENVIRONMENTS ::..
We currently use Eclipse (Neon 3 or Oxygen) as IDE, so the guidelines below
apply to that environment. Other IDEs should work fine, though; their users
need to figure out how these guidelines apply to them.

Importing the project directory in Eclipse, building it with the builtin Ant 
tool and debugging it under an embedded server should be quite straightforward.
Those unwilling to mess with manual setup can rely on the "New Project > Java 
Project from Existing Ant Buildfile" wizard, which works pretty well. The 
server configuration must still be done manually, though.

The concept and building process of GWT makes for some difficulty. Under GWT,
the client code is written in Java and then compiled to regular JavaScript 
files at build time (ant gwt.compile task). When coding and debugging the UI, 
it's a good thing to have changes to the client-code Java files hot-replaced 
into the accordant JavaScript files; GWT has a "devmode" for that. It's 
launched by running the class com.google.gwt.dev.DevMode found in gwt-dev.jar.
The Ant build file has a specific task for that (gwt.devmode) which works fine,
but has the minor hindrance of preventing other Ant tasks to run. To avoid that,
under Eclipse, a run/debug configuration may be set up; take the gwt.devmode
task in build.xml as a reference for the command-line arguments needed. In any
case, GWT's devmode should be started before launching the Tomcat server.

Some additional things worth saying:

i. An Ant build should be made before configuring the project Build Path in 
order to populate de deployable directory. Build Path output folder should be
deployable/skel-app/WEB-INF/classes/, so changes to Java files are hot-replaced
into the debugging application.

ii. Non-compilable web files are copied at build time from source/web/ to
deployable/skel-app/. Changes in the later directory are hot-replaced into the
debugging application, but are **not** tracked by GIT. Those changes must be
applied to source/web/ prior to committing. Eclipse compare tool works fine for
that. It's advisable to apply changes often in order to avoid local changes 
being destroyed by a later checkout and rebuild. Then, the daily routine should
be:

  Apply pending changes to source/web/ > Git fetch and merge > Ant build

iii. A .gitignore file may (should) be used to avoid tracking of the 
deployable/ and config/ directories. A sample file is provided, which also 
avoids tracking of Eclipse project settings files and other stuff. It's just
needed to copy sample.gitignore as .gitignore to have it doing its magic.

iv. After running GWT devmode, a complete build (ant deployable) is needed in
order to run the Tomcat server without devmode backend (i.e. with generated
JavaScript files statically compiled).
--------------------------------------------------------------------------------
